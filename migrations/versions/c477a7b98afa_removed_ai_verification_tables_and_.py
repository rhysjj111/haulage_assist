"""Removed ai verification tables and added week_number to fuel, day, job, payslip table and unique constraint with driver_id.

Revision ID: c477a7b98afa
Revises: 615139181c4d
Create Date: 2024-12-31 15:56:34.066282

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c477a7b98afa'
down_revision = '615139181c4d'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('ai_response_user_feedback')
    op.drop_table('job_anomaly_suggestion')
    op.drop_table('payslip_anomaly_suggestion')
    op.drop_table('day_anomaly_suggestion')
    op.drop_table('fuel_anomaly_suggestion')
    with op.batch_alter_table('missing_entry_suggestion', schema=None) as batch_op:
        batch_op.drop_index('ix_missing_entry_suggestion_date')
        batch_op.drop_index('ix_missing_entry_suggestion_driver_id')
        batch_op.drop_index('ix_missing_entry_suggestion_truck_id')

    op.drop_table('missing_entry_suggestion')
    op.drop_table('ai_processed_response')
    op.drop_table('ai_raw_response')
    with op.batch_alter_table('day', schema=None) as batch_op:
        batch_op.add_column(sa.Column('week_number', sa.Integer(), sa.Computed('((EXTRACT(DOW FROM date) + EXTRACT(week FROM date) * 7 - 6) / 7)::integer', ), nullable=False))
        batch_op.create_index(batch_op.f('ix_day_week_number'), ['week_number'], unique=False)

    with op.batch_alter_table('fuel', schema=None) as batch_op:
        batch_op.add_column(sa.Column('week_number', sa.Integer(), sa.Computed('((EXTRACT(DOW FROM date) + EXTRACT(week FROM date) * 7 - 6) / 7)::integer', ), nullable=False))
        batch_op.create_index(batch_op.f('ix_fuel_week_number'), ['week_number'], unique=False)

    with op.batch_alter_table('payslip', schema=None) as batch_op:
        batch_op.add_column(sa.Column('week_number', sa.Integer(), sa.Computed('((EXTRACT(DOW FROM date) + EXTRACT(week FROM date) * 7 - 6) / 7)::integer', ), nullable=False))
        batch_op.drop_constraint('_driver_date_ps_uc', type_='unique')
        batch_op.create_unique_constraint('_driver_week_payslip_uc', ['driver_id', 'week_number'])
        batch_op.create_index(batch_op.f('ix_payslip_week_number'), ['week_number'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('payslip', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_payslip_week_number'))
        batch_op.drop_constraint('_driver_week_payslip_uc', type_='unique')
        batch_op.create_unique_constraint('_driver_date_ps_uc', ['driver_id', 'date'])
        batch_op.drop_column('week_number')

    with op.batch_alter_table('job', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_job_week_number'))
        batch_op.drop_column('week_number')

    with op.batch_alter_table('fuel', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_fuel_week_number'))
        batch_op.drop_column('week_number')

    with op.batch_alter_table('day', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_day_week_number'))
        batch_op.drop_column('week_number')

    op.create_table('missing_entry_suggestion',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('driver_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('truck_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('table_name', postgresql.ENUM('DRIVER', 'TRUCK', 'DAY', 'JOB', 'FUEL', 'PAYSLIP', name='tablename'), autoincrement=False, nullable=False),
    sa.Column('date_range_acceptable', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('valid_suggestion', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('original_suggestion', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['driver_id'], ['driver.id'], name='missing_entry_suggestion_driver_id_fkey'),
    sa.ForeignKeyConstraint(['id'], ['ai_processed_response.id'], name='missing_entry_suggestion_id_fkey'),
    sa.ForeignKeyConstraint(['truck_id'], ['truck.id'], name='missing_entry_suggestion_truck_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='missing_entry_suggestion_pkey')
    )
    with op.batch_alter_table('missing_entry_suggestion', schema=None) as batch_op:
        batch_op.create_index('ix_missing_entry_suggestion_truck_id', ['truck_id'], unique=False)
        batch_op.create_index('ix_missing_entry_suggestion_driver_id', ['driver_id'], unique=False)
        batch_op.create_index('ix_missing_entry_suggestion_date', ['date'], unique=False)

    op.create_table('ai_processed_response',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('ai_processed_response_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('explanation', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('raw_response_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['raw_response_id'], ['ai_raw_response.id'], name='ai_processed_response_raw_response_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='ai_processed_response_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('fuel_anomaly_suggestion',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('fuel_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['fuel_id'], ['fuel.id'], name='fuel_anomaly_suggestion_fuel_id_fkey'),
    sa.ForeignKeyConstraint(['id'], ['ai_processed_response.id'], name='fuel_anomaly_suggestion_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='fuel_anomaly_suggestion_pkey')
    )
    op.create_table('ai_response_user_feedback',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('directly_helpful', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('indirectly_helpful', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('processed_response_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.CheckConstraint('NOT (directly_helpful = true AND indirectly_helpful = true)', name='helpful_constraint'),
    sa.ForeignKeyConstraint(['processed_response_id'], ['ai_processed_response.id'], name='ai_response_user_feedback_processed_response_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='ai_response_user_feedback_pkey')
    )
    op.create_table('day_anomaly_suggestion',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('day_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['day_id'], ['day.id'], name='day_anomaly_suggestion_day_id_fkey'),
    sa.ForeignKeyConstraint(['id'], ['ai_processed_response.id'], name='day_anomaly_suggestion_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='day_anomaly_suggestion_pkey')
    )
    op.create_table('payslip_anomaly_suggestion',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('payslip_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['ai_processed_response.id'], name='payslip_anomaly_suggestion_id_fkey'),
    sa.ForeignKeyConstraint(['payslip_id'], ['payslip.id'], name='payslip_anomaly_suggestion_payslip_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='payslip_anomaly_suggestion_pkey')
    )
    op.create_table('job_anomaly_suggestion',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('job_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['id'], ['ai_processed_response.id'], name='job_anomaly_suggestion_id_fkey'),
    sa.ForeignKeyConstraint(['job_id'], ['job.id'], name='job_anomaly_suggestion_job_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='job_anomaly_suggestion_pkey')
    )
    op.create_table('ai_raw_response',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('historical_context_string', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('raw_response', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('processing_successful', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='ai_raw_response_pkey')
    )
    # ### end Alembic commands ###
